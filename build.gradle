buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "jacoco"
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

group = 'FIS'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.8"
}

dependencies {
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.projectlombok:lombok:1.18.22'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
	testCompileOnly 'junit:junit:4.13'
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

	//slackWebHook
	implementation 'com.github.maricn:logback-slack-appender:1.4.0'
	implementation 'com.slack.api:slack-api-client:1.29.0'

	//swagger
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.5' // Use the latest version

	implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'

	// JWT 의존성 추가
	implementation group: 'com.auth0', name: 'java-jwt', version: '3.18.3'

	//이미지 내보내기
	implementation 'commons-io:commons-io:2.11.0'

	// 문자메세지 보내기
	implementation group: 'net.nurigo', name: 'sdk', version: '4.1.3'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'

	// test 위한 Gson 라이브러리 추가
	implementation 'com.google.code.gson:gson:2.8.7'
	// static method mock 을 위한 의존성 추가
	testImplementation('org.mockito:mockito-inline:3.4.0')

	// AWS S3 사용을 위한 의존성 추가 Spring-Cloud-AWS 추가
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.3.1'
	// yml customizing 를 하기위해 resolver 만들기 위한 의존성 추갇
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// naver map 의 geoLocation 사용 위한 json 파서기
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	// localdate 직렬화 문제 해결
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// 스프링 상태 검사
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// spring-security-test가 제공하는 csrf() 옵션 추가
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'

}

// 서순이 중요하다 test -> jacocoTestReport -> jacocoTestCoverageVerification 순서로 task 진행
test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
	bootJar
}

// test 결과값 받는 부분을 설정하기 위한 jacocoTestReport
jacocoTestReport {
	reports {
		html.enabled true
		csv.enabled false
		xml.enabled false
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			// 측정의 큰 단위를 나타냄
			element = 'CLASS'

			limit {
				// 커버리지 측정의 최소 단위
				counter = 'LINE'
			}

			excludes = []
		}
	}
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

jar {
	enabled = false
}