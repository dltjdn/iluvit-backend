name: Dev Deploy

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: iluvit-dev-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: iluvit-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: iluvit-dev-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gitignore한 파일 생성해주기
      # (3) create application.properties
      - name: make gitignore files
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
          touch ./application-dev.yml
          echo "${{ secrets.DEV_YML }}" > ./application-dev.yml
          touch ./application-http.yml
          echo "${{ secrets.HTTP_YML }}" > ./application-http.yml
          touch ./application-map.yml
          echo "${{ secrets.MAP_YML }}" > ./application-map.yml
          touch ./application-s3.yml
          echo "${{ secrets.S3_YML }}" > ./application-s3.yml
          touch ./application-secret.yml
          echo "${{ secrets.SECRET_YML }}" > ./application-secret.yml
          touch ./application-security.yml
          echo "${{ secrets.SECURITY_YML }}" > ./application-security.yml
          touch ./application-auth.yml
          echo "${{ secrets.AUTH_YML }}" > ./application-auth.yml  

      # (8) PR 제목 검증 및 시맨틱 버전 정보 추출
      - name: Extract Semantic Version
        id: extract_semantic_version
        run: |
          PR_TITLE=$(curl -s -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | jq -r .title)
          if [[ ! "$PR_TITLE" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid PR title format: $PR_TITLE. PR title must be in the format 'vX.Y.Z'."
            exit 1
          fi
          echo "SEMANTIC_VERSION=$(echo $PR_TITLE | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | sed 's/v//')" >> $GITHUB_OUTPUT

      # (4) Gradle build (시맨틱 버전 정보 설정, Test 제외)
      - name: Build with Gradle
        run : |
          SEMANTIC_VERSION="${{ steps.extract_semantic_version.outputs.SEMANTIC_VERSION }}"
          echo "version=$SEMANTIC_VERSION" > ./gradle.properties
          ./gradlew clean build --exclude-task test

      # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --file-exists-behavior OVERWRITE \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip